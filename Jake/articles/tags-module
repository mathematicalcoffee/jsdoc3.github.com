<!--{
    "title":       "@module",
    "out":         "tags-module.html",
    "description": "Document a JavaScript module."
}-->
<h3>Syntax</h3>
<code>@module [[{&lt;type&gt;}] &lt;ModuleName&gt;]</code>
<p>Note: If you provide a type, you <em>must</em> also provide a name.</p>

<h3>Overview</h3>

<p>
The @module tag marks the current file as being its own module. All symbols in the file are assumed
to be members of the module unless documented otherwise.
</p>

<p>
Link to a module (e.g. within a <a href="tags-link.html">@link</a> or
<a href="tags-see.html">@see</a> tag) using "module:moduleName". For example, "@module foo/bar" can
be linked to using "{@link module:foo/bar}".
</p>

<p>
If the module name is not provided, it is derived from the module's path and filename. For example,
suppose I have a file <code>test.js</code>, located in the <code>src</code> directory, that contains
the block comment <code>/** @module */</code>. Here are some scenarios for running JSDoc and the
resulting module names for test.js:
</p>

{{#example}}Derived module names if none is provided.
# from src/
jsdoc ./test.js   # module name 'test'

# from src's parent directory:
jsdoc src/test.js # module name 'src/test'
jsdoc -r src/     # module name 'test'
{{/example}}

<h3>Examples</h3>

<p>
The following example shows the namepaths that are used for symbols in a module. The first symbol
is a module-private, or "inner," variable--it can be only accessed within the module. The second
symbol is a static function that is exported by the module.
</p>

{{#example}}Basic @module use
/** @module myModule */

/** will be module:myModule~foo */
var foo = 1;

/** will be module:myModule.bar */
var bar = function() {};
{{/example}}

<p>
When an exported symbol is defined as a member of <code>module.exports</code>, <code>exports</code>,
or <code>this</code>, JSDoc infers that the symbol is a static member of the module.
</p>

<p>
In the following example, the Book class is documented as a static member, "module:bookshelf.Book",
with one instance member, "module:bookshelf.Book#title".
</p>

{{#example}}Defining exported symbols as a member of 'this'
/** @module bookshelf */
/** @class */
this.Book = function (title) {
    /** The title. */
    this.title = title;
};
{{/example}}

<p>
In the following example, the two functions have the namepaths "module:color/mixer.blend" and
"module:color/mixer.darken".
</p>

{{#example}}Defining exported symbols as a member of 'module.exports' or 'exports'
/** @module color/mixer */
module.exports = {
    /** Blend two colours together. */
    blend: function (color1, color2) {}
};
/** Darkens a color. */
exports.darken = function (color, shade) {};
{{/example}}

<p>
See <a href="howto-commonjs-modules.html">Documenting JavaScript Modules</a> for further examples.
</p>

<h3>See Also</h3>

<ul>
    <li><a href="howto-commonjs-modules.html">Other helpful @module examples</a></li>
    <li><a href="tags-exports.html">@exports</a></li>
</ul>
