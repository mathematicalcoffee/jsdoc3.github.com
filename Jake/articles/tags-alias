<!--{
    "title":       "@alias",
    "out":         "tags-alias.html",
    "description": "Treat a member as if it had a different name."
}-->
<h3>Syntax</h3>
<code>@alias &lt;aliasNamepath&gt;</code>

<h3>Overview</h3>

<p>
The @alias tag causes JSDoc to treat all references to a member as if the member had a different
name. This tag is especially useful if you define a class within an inner function; in this case,
you can use the @alias tag to tell JSDoc how the class is exposed in your app.
</p>

<p>
While the @alias tag may sound similar to the @name tag, these tags behave very differently:
</p>

<ul>
<li>The @name tag tells JSDoc to ignore any code associated with the comment. For example, when
JSDoc processes the following code, it ignores the fact that the comment for <code>bar</code> is
attached to a function:
<pre><code>/**
 * Bar function.
 * @name bar
 */
function foo() {}
</code></pre></li>
<li>The @alias tag tells JSDoc to pretend that Member A is actually named Member B. For example,
when JSDoc processes the following code, it recognizes that <code>foo</code> is a function, then
renames <code>foo</code> to <code>bar</code> in the documentation:
<pre><code>/**
 * Bar function.
 * @alias bar
 */
function foo() {}
</code></pre></li>
</ul>

<h3>Examples</h3>

<p>
Suppose you are using a class framework that expects you to pass in a constructor function when you
define a class. You can use the @alias tag to tell JSDoc how the class will be exposed in your app.
</p>

<p>
In the following example, the @alias tag tells JSDoc to treat the anonymous function as if it were
the constructor for the class "trackr.CookieManager". Within the function, JSDoc interprets the
<code>this</code> keyword relative to trackr.CookieManager, so the "value" method has the namepath
"trackr.CookieManager#value".
</p>

{{#example}}Using @alias with an anonymous constructor function
Klass('trackr.CookieManager',

    /**
     * @class
     * @alias trackr.CookieManager
     * @param {Object} kv
     */
    function(kv) {
        /** The value. */
        this.value = kv;
    }

);
{{/example}}

<p>
You can also use the @alias tag with members that are created within an immediately invoked function
expression (IIFE). The @alias tag tells JSDoc that these members are exposed outside of the IIFE's
scope.
</p>

{{#example}}Using @alias for static members of a namespace
/** @namespace */
var Apple = {};

(function(ns) {
    /**
     * @namespace
     * @alias Apple.Core
     */
    var core = {};

    /** Documented as Apple.Core.seed */
    core.seed = function() {};

    ns.Core = core;
})(Apple);
{{/example}}

<p>
For members that are defined within an object literal, you can use the @alias tag as an alternative
to the <a href="tags-lends.html">@lends</a> tag.
</p>

{{#example}}Using @alias for an object literal
// Documenting objectA with @alias

var objectA = (function() {

    /**
     * Documented as objectA
     * @alias objectA
     * @namespace
     */
    var x = {
        /**
         * Documented as objectA.myProperty
         * @member
         */
        myProperty: 'foo'
    };

    return x;
})();

// Documenting objectB with @lends

/**
 * Documented as objectB
 * @namespace
 */
var objectB = (function() {

    /** @lends objectB */
    var x = {
        /**
         * Documented as objectB.myProperty
         * @member
         */
        myProperty: 'bar'
    };

    return x;
})();
{{/example}}

<h3>See Also</h3>

<ul>
    <li><a href="tags-name.html">@name</a></li>
    <li><a href="tags-lends.html">@lends</a></li>
</ul>
