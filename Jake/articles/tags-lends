<!--{
    "title":       "@lends",
    "out":         "tags-lends.html",
    "description": "Document properties on an object literal as if they belonged to a symbol with a given name."
}-->
<h3>Syntax</h3>

<code>@lends &lt;namepath></code>

<h3>Overview</h3>

<p>
	The <code>@lends</code> tag allows you to document all the members of an object literal as if
    they were members of a symbol with the given name. You might want to do this if you are passing
    an object literal into a function that creates a named class from its members.
</p>

<h3>Examples</h3>

<p>
	In this example, we want to use a helper function to make a class named "Person," along with
    instance  methods named "initialize" and "say." This is similar to how some popular frameworks
    handle class creation.
</p>

{{#example}}Example class
// We want to document this as being a class
var Person = makeClass(
    // We want to document these as being methods
    {
        initialize: function(name) {
            this.name = name;
        },
        say: function(message) {
            return this.name + " says: " + message;
        }
    }
);
{{/example}}

<p>
	Without any comments, JSDoc won't recognize that this code creates a class with two methods
    called "Person". To document the methods, we must use a "@lends" tag in a doc comment
    immediately before the object literal. The @lends tag tells JSDoc that all the member names of
    that object literal are being "lent" to a variable named "Person."
</p>

<p>
    The following example gets us closer to what we want:
</p>

{{#example}}Documented as static methods
/** @class */
var Person = makeClass(
    /** @lends Person */
    {
        initialize: function(name) {
            this.name = name;
        },
        say: function(message) {
            return this.name + " says: " + message;
        }
    }
);
{{/example}}

<p>
	Now the functions named "initialize" and "say" will be documented, but they appear as static
    methods of a class named "Person." That is possibly what you meant, but in this case we want
    "initialize" and "say" to belong to the instances of the "Person" class. So we change things
    slightly by lending the methods to the class's prototype:
</p>

{{#example}}Documented as instance methods
/** @class */
var Person = makeClass(
    /** @lends Person.prototype */
    {
        initialize: function(name) {
            this.name = name;
        },
        say: function(message) {
            return this.name + " says: " + message;
        }
    }
);
{{/example}}

<p>
	One final step: Our class framework uses the loaned "initialize" function to construct Person
    instances, but a Person instance does not have its own "initialize" method. The solution is to
	add the @constructs tag to the loaned function. Remember to remove the @class tag as well, or
    else two classes will be documented.
</p>

{{#example}}Documented with a constructor
var Person = makeClass(
    /** @lends Person.prototype */
    {
        /** @constructs */
        initialize: function(name) {
            this.name = name;
        },
        say: function(message) {
            return this.name + " says: " + message;
        }
    }
);
{{/example}}

<h3>See Also</h3>

<ul>
    <li><a href="tags-borrows.html">@borrows</a></li>
    <li><a href="tags-constructs.html">@constructs</a></li>
</ul>